{
  "version": 3,
  "sources": ["../../react-redux/es/hooks/useSelector.js", "../../react-redux/es/hooks/useReduxContext.js", "../../react-redux/es/components/Context.js", "../../react-redux/es/utils/useSyncExternalStore.js"],
  "sourcesContent": ["import { useCallback, useDebugValue, useRef } from 'react';\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\n  return function useSelector(selector, equalityFnOrOptions = {}) {\n    const {\n      equalityFn = refEquality,\n      stabilityCheck = undefined,\n      noopCheck = undefined\n    } = typeof equalityFnOrOptions === 'function' ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck: globalStabilityCheck,\n      noopCheck: globalNoopCheck\n    } = useReduxContext();\n    const firstRun = useRef(true);\n    const wrappedSelector = useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\n\n          if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\n                state,\n                selected,\n                selected2: toCompare\n              });\n            }\n          }\n\n          const finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\n\n          if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\n            // @ts-ignore\n            if (selected === state) {\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.');\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();", "import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\n\n/**\n * Hook factory, which creates a `useReduxContext` hook bound to a given context. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useReduxContext` hook bound to the specified context.\n */\nexport function createReduxContextHook(context = ReactReduxContext) {\n  return function useReduxContext() {\n    const contextValue = useContext(context);\n\n    if (process.env.NODE_ENV !== 'production' && !contextValue) {\n      throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');\n    }\n\n    return contextValue;\n  };\n}\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nexport const useReduxContext = /*#__PURE__*/createReduxContextHook();", "import * as React from 'react';\nconst ContextKey = Symbol.for(`react-redux-context`);\nconst gT = typeof globalThis !== \"undefined\" ? globalThis :\n/* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */\n{};\n\nfunction getContext() {\n  var _gT$ContextKey;\n\n  if (!React.createContext) return {};\n  const contextMap = (_gT$ContextKey = gT[ContextKey]) != null ? _gT$ContextKey : gT[ContextKey] = new Map();\n  let realContext = contextMap.get(React.createContext);\n\n  if (!realContext) {\n    realContext = React.createContext(null);\n\n    if (process.env.NODE_ENV !== 'production') {\n      realContext.displayName = 'ReactRedux';\n    }\n\n    contextMap.set(React.createContext, realContext);\n  }\n\n  return realContext;\n}\n\nexport const ReactReduxContext = /*#__PURE__*/getContext();\nexport default ReactReduxContext;", "export const notInitialized = () => {\n  throw new Error('uSES not initialized!');\n};"],
  "mappings": "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",
  "names": ["import_react", "useReduxContext", "useReduxContext", "useSelector"]
}
